"""
"""

import phantom.rules as phantom
import json
from datetime import datetime, timedelta

##############################
# Start - Global Code Block

"""
malwaredomainlist app 1.0.8 Self-contained test playbook script
test coverage: Y means yes N means no M- executed but not really tested at the datapath level 

Y - domain reputation - Query for domain reputation
Y - ip reputation - Query for IP reputation
N - test connectivity - This action runs a quick query on the server to check the connection and credentials

"""
#
# 
# 

import random
import numbers
import os, inspect, threading

from bs4 import BeautifulSoup
import requests
import re

# ========== Update the next constants per requirement ==============
version = '1.0c'
expected_pass_count = 1  # how many pass counts we want this test to pass

# Begining of Global block
keyfile = os.path.basename(__file__)[1:-1]
padlock = threading.Lock()


# Helper functions, should not require modification, just copy and paste in every test playbook
def _save_data(qa_pass_count=0, qa_fail_count=0, qa_overall_result="Fail", message="", init=False, offset=0):
    if init:
        if message == "":
            message = 'At on_start'
        qa_overall_result = {'qa_pass_count': 0, 'qa_fail_count': 0, 'overall_result': 'Fail', 'message': message}
        phantom.save_data(qa_overall_result, key=keyfile)

    else:
        with padlock:
            qa_overall_result = phantom.get_data(key=keyfile, clear_data=False)
            if len(message) > 0:
                message = "{}():{}> {}".format(inspect.stack()[1 + offset][3], inspect.stack()[1 + offset][2], message)
                phantom.debug(message)
                qa_overall_result['message'] += "\n" + message
            qa_overall_result['qa_pass_count'] += qa_pass_count
            qa_overall_result['qa_fail_count'] += qa_fail_count
            phantom.save_data(qa_overall_result, key=keyfile)


def _check_value(l_value, data_path, results, action):
    # get the action Name
    action_name = action['action']

    # Get the leaf node, this is the value that we are checking of
    leaf_node = data_path.split('.')[-1]

    # get the value in the results
    r_value = phantom.collect(results, data_path)

    # Init the values as if the comparison failed
    qa_pass_count = 0
    qa_fail_count = 1
    test_result = "Fail"
    expected_message = 'expecting "{0}"'.format(l_value)

    # Compare
    if (str(l_value) in str(r_value)):
        # Passed, set the vars accordingly
        qa_pass_count = 1
        qa_fail_count = 0
        test_result = "Pass"
        expected_message = 'as expected'

    # Now call save_data with what was detected
    _save_data(qa_fail_count=qa_fail_count,
               qa_pass_count=qa_pass_count,
               message='{result}: action "{action_name}" {leaf_node} is "{r_value}", {expected_message}'.format(
                   result=test_result,
                   action_name=action_name,
                   leaf_node=leaf_node,
                   r_value=r_value,
                   expected_message=expected_message),
               offset=1)

    return True


# End - Global Code block
##############################

# End - Global Code block
##############################

def on_start(container):
    global bad_ip_address 
    
    phantom.debug('on_start() called')
    _save_data(init=True)

    while True:
        # Extract a sample IP address from random ip domain
        network_range = '.' + str(random.randint(1,254)) 
                                         
        try:
            # Extract only 1 IP address and remove all other text
            r  = requests.get("http://www.malwaredomainlist.com/mdl.php?search="+ network_range + "&colsearch=All&quantity=10")
            data = r.text
            soup = BeautifulSoup(data)
            #phantom.debug ("r.text = {}\nr = {}".format(data, r))

            bad_ip_address = soup.body.findAll(text=re.compile(network_range), limit=1)
            bad_ip_address = bad_ip_address[0]
            bad_ip_address = re.search(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}', bad_ip_address).group()  
            phantom.debug("Extracted malware IP address from the website: {}".format(bad_ip_address))
            break
        except:
            phantom.debug("Extracted address segment %s does not contain data... Trying a new one" % network_range)
            pass

    # call 'ip_reputation_1' block
    ip_reputation_1(container=container)

    return

def domain_reputation_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):
    phantom.debug('domain_reputation_1() called')
    
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'domain_reputation_1' call
    results_data_1 = phantom.collect2(container=container, datapath=['ip_reputation_1:action_result.data.*.Domain', 'ip_reputation_1:action_result.parameter.context.artifact_id'], action_results=results)

    parameters = []
    
    # build parameters list for 'domain_reputation_1' call
    for results_item_1 in results_data_1:
        if results_item_1[0]:
            parameters.append({
                'domain': results_item_1[0],
                'include_inactive': True,
                # context (artifact id) is added to associate results with the artifact
                'context': {'artifact_id': results_item_1[1]},
            })

    phantom.act("domain reputation", parameters=parameters, assets=['malwaredomainlist'], callback=whois_ip_1, name="domain_reputation_1")

    return

def whois_ip_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):
    phantom.debug('whois_ip_1() called')
    
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'whois_ip_1' call
    results_data_1 = phantom.collect2(container=container, datapath=['domain_reputation_1:action_result.data.*.IP', 'domain_reputation_1:action_result.parameter.context.artifact_id'], action_results=results)

    parameters = []
    
    # build parameters list for 'whois_ip_1' call
    for results_item_1 in results_data_1:
        if results_item_1[0]:
            parameters.append({
                'ip': results_item_1[0],
                # context (artifact id) is added to associate results with the artifact
                'context': {'artifact_id': results_item_1[1]},
            })

    phantom.act("whois ip", parameters=parameters, assets=['whois'], callback=decision_1, name="whois_ip_1", parent_action=action)

    return

def whois_ip_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):
    phantom.debug('whois_ip_2() called')
    
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'whois_ip_2' call
    results_data_1 = phantom.collect2(container=container, datapath=['ip_reputation_1:action_result.data.*.IP', 'ip_reputation_1:action_result.parameter.context.artifact_id'], action_results=results)

    parameters = []
    
    # build parameters list for 'whois_ip_2' call
    for results_item_1 in results_data_1:
        if results_item_1[0]:
            parameters.append({
                'ip': results_item_1[0],
                # context (artifact id) is added to associate results with the artifact
                'context': {'artifact_id': results_item_1[1]},
            })

    phantom.act("whois ip", parameters=parameters, assets=['whois'], callback=decision_3, name="whois_ip_2")

    return

def decision_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):
    phantom.debug('decision_1() called')

    # check for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        action_results=results,
        conditions=[
            ["whois_ip_1:action_result.data.*.nets.*.country", "==", "whois_ip_1:action_result.data.*.nets.*.country"],
        ])

    # call connected blocks if condition 1 matched
    if matched_artifacts_1 or matched_results_1:
        # The following routine is manually added to count the qa pass/fail count.  All others are created from COA
        _check_value('success', "action_result.status", results, action)
        
        return

    return

def decision_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):
    phantom.debug('decision_3() called')

    # check for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        action_results=results,
        conditions=[
            ["whois_ip_2:action_result.data.*.nets.*.country", "==", "whois_ip_2:action_result.data.*.nets.*.country"],
        ])

    # call connected blocks if condition 1 matched
    if matched_artifacts_1 or matched_results_1:
        # The following routine is manually added to count the qa pass/fail count.  All others are created from COA
        _check_value('success', "action_result.status", results, action)
        
        return

    return

def ip_reputation_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):
    phantom.debug('ip_reputation_1() called')

    # collect data for 'ip_reputation_1' call

    parameters = []
    
    # build parameters list for 'ip_reputation_1' call
    parameters.append({
        #'ip': "188.225.32.177",
        'ip': bad_ip_address, 
        'include_inactive': True,
    })

    phantom.act("ip reputation", parameters=parameters, assets=['malwaredomainlist'], callback=decision_2, name="ip_reputation_1")    
    
    return

def decision_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):
    phantom.debug('decision_2() called')

    # check for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        action_results=results,
        conditions=[
            ["ip_reputation_1:action_result.data.*.Domain", "!=", ""],
        ])

    # call connected blocks if condition 1 matched
    if matched_artifacts_1 or matched_results_1:
                
        domain_reputation_1(action=action, success=success, container=container, results=results, handle=handle)
        return

    # call connected blocks for 'else' condition 2
    whois_ip_2(action=action, success=success, container=container, results=results, handle=handle)

    return

def on_finish(container, summary):
    phantom.debug('on_finish() called')
    # This function is called after all actions are completed.
    # summary of all the action and/or all detals of actions
    # can be collected here.

    # summary_json = phantom.get_summary()
    # if 'result' in summary_json:
    # for action_result in summary_json['result']:
    # if 'action_run_id' in action_result:
    # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)
    # phantom.debug(action_results)

    qa_overall_result = phantom.get_data(key=keyfile, clear_data=False)
    qa_overall_result['message'] = qa_overall_result['message'] + '\n\n' + summary
    #

    #
    if qa_overall_result['qa_fail_count'] == 0:
        if expected_pass_count == qa_overall_result['qa_pass_count']:
            qa_overall_result['overall_result'] = 'Pass'  # set final pass/fail result in on_finish
    phantom.debug(
        'Overall Qa result: {} - Pass: {} - Fail: {} \nMessage: {}'.format(qa_overall_result['overall_result'],
                                                                           qa_overall_result['qa_pass_count'],
                                                                           qa_overall_result['qa_fail_count'],
                                                                           qa_overall_result['message'], ))
    phantom.save_data(qa_overall_result, key=keyfile)

    return